<!DOCTYPE html>




<html lang="en">
  <head>
    <meta charset="utf-8" />
    
    <title>simpleparser.builtin_parsers &mdash; simpleparser 0.0.1 documentation</title>
    <meta name="description" content="">
    <meta name="author" content="">

    

<link rel="stylesheet" href="../../_static/css/basicstrap-base.css" type="text/css" />
<link rel="stylesheet" id="current-theme" href="../../_static/css/bootstrap3/bootstrap.min.css" type="text/css" />
<link rel="stylesheet" id="current-adjust-theme" type="text/css" />

<link rel="stylesheet" href="../../_static/css/font-awesome.min.css">

<style type="text/css">
  body {
    padding-top: 60px;
    padding-bottom: 40px;
  }
</style>

<link rel="stylesheet" href="../../_static/css/basicstrap.css" type="text/css" />
<link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    
<script type="text/javascript">
  var DOCUMENTATION_OPTIONS = {
            URL_ROOT:    '../../',
            VERSION:     '0.0.1',
            COLLAPSE_INDEX: false,
            FILE_SUFFIX: '.html',
            HAS_SOURCE:  true
  };
</script>
    <script type="text/javascript" src="../../_static/js/jquery.min.js"></script>
    <script type="text/javascript" src="../../_static/underscore.js"></script>
    <script type="text/javascript" src="../../_static/doctools.js"></script>
    <script type="text/javascript" src="../../_static/js/bootstrap3.min.js"></script>
<script type="text/javascript" src="../../_static/js/jquery.cookie.min.js"></script>
<script type="text/javascript" src="../../_static/js/basicstrap.js"></script>
<script type="text/javascript">
</script>
    <link rel="index" title="Index" href="../../genindex.html" />
    <link rel="search" title="Search" href="../../search.html" />
    <link rel="top" title="simpleparser 0.0.1 documentation" href="../../index.html" />
    <link rel="up" title="Module code" href="../index.html" /> 
  </head>
  <body role="document">
    <div id="navbar-top" class="navbar navbar-fixed-top navbar-default" role="navigation" aria-label="top navigation">
      <div class="container-fluid">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="../../index.html">simpleparser 0.0.1 documentation</a>
        </div>
        <div class="navbar-collapse collapse">
          <ul class="nav navbar-nav navbar-right">

            
              <li><a href="../../py-modindex.html" title="Python Module Index" >modules </a></li>
              <li><a href="../../genindex.html" title="General Index" accesskey="I">index </a></li>
              <li><a href="../index.html" accesskey="U">Module code</a></li>
            

            <li class="visible-xs">
                <form class="search form-search form-inline navbar-form navbar-right sp-searchbox" action="../../search.html" method="get">
                  <div class="input-append input-group">
                    <input type="text" class="search-query form-control" name="q" placeholder="Search...">
                    <span class="input-group-btn">
                    <input type="submit" class="btn" value="Go" />
                    </span>
                  </div>
                  <input type="hidden" name="check_keywords" value="yes" />
                  <input type="hidden" name="area" value="default" />
                </form>
            </li>

            

          </ul>

        </div>
      </div>
    </div>
    

    <!-- container -->
    <div class="container-fluid">

      <!-- row -->
      <div class="row">
         
<div class="col-md-3 hidden-xs" id="sidebar-wrapper">
  <div class="sidebar hidden-xs" role="navigation" aria-label="main navigation">
<div id="searchbox" role="search">
  <h3>Quick search</h3>
  <form class="search form-inline" action="../../search.html" method="get">
      <div class="input-append input-group">
        <input type="text" class="search-query form-control" name="q" placeholder="Search...">
        <span class="input-group-btn">
        <input type="submit" class="btn" value="Go" />
        </span>
      </div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    <p class="searchtip" style="font-size: 90%">
    Enter search terms or a module, class or function name.
    </p>
</div>
  </div>
</div> 
        

        <div class="col-md-9" id="content-wrapper">
          <div class="document" role="main">
            <div class="documentwrapper">
              <div class="bodywrapper">
                <div class="body">
                  
  <h1>Source code for simpleparser.builtin_parsers</h1><div class="highlight"><pre>
<span></span><span class="sd">&quot;&quot;&quot;a simple parser combinator.&quot;&quot;&quot;</span>

<span class="kn">from</span> <span class="nn">simpleparser</span> <span class="kn">import</span> <span class="n">token</span><span class="p">,</span> <span class="n">seq</span><span class="p">,</span> <span class="n">transform</span><span class="p">,</span> <span class="n">choice</span><span class="p">,</span> <span class="n">Parser</span>


<div class="viewcode-block" id="lf"><a class="viewcode-back" href="../../simpleparser.builtin_parsers.html#simpleparser.builtin_parsers.lf">[docs]</a><span class="k">def</span> <span class="nf">lf</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Parser</span><span class="p">:</span>
    <span class="sa">r</span><span class="sd">&quot;&quot;&quot;Return a LF parser.</span>

<span class="sd">    Returns</span>
<span class="sd">    -------</span>
<span class="sd">        Parser: LF(\n) parser.</span>

<span class="sd">    Example</span>
<span class="sd">    -------</span>
<span class="sd">    &gt;&gt;&gt; from simpleparser.builtin_parsers import lf</span>
<span class="sd">    &gt;&gt;&gt; p = lf()</span>
<span class="sd">    &gt;&gt;&gt; p.exec(&quot;\nfoo&quot;)</span>
<span class="sd">    [&#39;\n&#39;]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">token</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span></div>


<div class="viewcode-block" id="cr"><a class="viewcode-back" href="../../simpleparser.builtin_parsers.html#simpleparser.builtin_parsers.cr">[docs]</a><span class="k">def</span> <span class="nf">cr</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Parser</span><span class="p">:</span>
    <span class="sa">r</span><span class="sd">&quot;&quot;&quot;Return a CR parser.</span>

<span class="sd">    Returns</span>
<span class="sd">    -------</span>
<span class="sd">        Parser: CR(\r) parser.</span>

<span class="sd">    Example</span>
<span class="sd">    -------</span>
<span class="sd">    &gt;&gt;&gt; from simpleparser.builtin_parsers import cr</span>
<span class="sd">    &gt;&gt;&gt; p = cr()</span>
<span class="sd">    &gt;&gt;&gt; p.exec(&quot;\rfoo&quot;)</span>
<span class="sd">    [&#39;\r&#39;]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">token</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\r</span><span class="s2">&quot;</span><span class="p">)</span></div>


<div class="viewcode-block" id="crlf"><a class="viewcode-back" href="../../simpleparser.builtin_parsers.html#simpleparser.builtin_parsers.crlf">[docs]</a><span class="k">def</span> <span class="nf">crlf</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Parser</span><span class="p">:</span>
    <span class="sa">r</span><span class="sd">&quot;&quot;&quot;Return a CRLF parser.</span>

<span class="sd">    Returns</span>
<span class="sd">    -------</span>
<span class="sd">        Parser: CRLF(\r\n) parser.</span>

<span class="sd">    Example</span>
<span class="sd">    -------</span>
<span class="sd">    &gt;&gt;&gt; from simpleparser.builtin_parsers import crlf</span>
<span class="sd">    &gt;&gt;&gt; p = crlf()</span>
<span class="sd">    &gt;&gt;&gt; p.exec(&quot;\r\nfoo&quot;)</span>
<span class="sd">    [&#39;\r\n&#39;]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">transform</span><span class="p">(</span><span class="n">seq</span><span class="p">(</span><span class="n">cr</span><span class="p">(),</span> <span class="n">lf</span><span class="p">()),</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">x</span><span class="p">)])</span></div>


<div class="viewcode-block" id="newline"><a class="viewcode-back" href="../../simpleparser.builtin_parsers.html#simpleparser.builtin_parsers.newline">[docs]</a><span class="k">def</span> <span class="nf">newline</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Parser</span><span class="p">:</span>
    <span class="sa">r</span><span class="sd">&quot;&quot;&quot;Return a new line parser.</span>

<span class="sd">    Returns</span>
<span class="sd">    -------</span>
<span class="sd">        Parser: CRLF(\r\n) or CR(\r) or LF(\n) parser.</span>

<span class="sd">    Example</span>
<span class="sd">    -------</span>
<span class="sd">    &gt;&gt;&gt; from simpleparser.builtin_parsers import newline</span>
<span class="sd">    &gt;&gt;&gt; p = newline()</span>
<span class="sd">    &gt;&gt;&gt; p.exec(&quot;\r\nfoo&quot;)</span>
<span class="sd">    [&#39;\r\n&#39;]</span>
<span class="sd">    &gt;&gt;&gt; p.exec(&quot;\rfoo&quot;)</span>
<span class="sd">    [&#39;\r&#39;]</span>
<span class="sd">    &gt;&gt;&gt; p.exec(&quot;\nfoo&quot;)</span>
<span class="sd">    [&#39;\n&#39;]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">choice</span><span class="p">(</span><span class="n">crlf</span><span class="p">(),</span> <span class="n">cr</span><span class="p">(),</span> <span class="n">lf</span><span class="p">())</span></div>


<span class="c1"># def char() -&gt; Parser:</span>
<span class="c1">#     &quot;&quot;&quot;Char function.&quot;&quot;&quot;</span>
<span class="c1">#     return regex(r&quot;\S&quot;)</span>


<span class="c1"># def noneOf(s: str) -&gt; Parser:</span>
<span class="c1">#     &quot;&quot;&quot;</span>
<span class="c1">#     As the dual of oneOf, noneOf cs succeeds</span>
<span class="c1">#     if the current character not in the supplied</span>
<span class="c1">#     list of characters cs. Returns the parsed character.</span>
<span class="c1">#</span>
<span class="c1">#     Example</span>
<span class="c1">#     -------</span>
<span class="c1">#     &gt;&gt;&gt; from simpleparser import noneOf</span>
<span class="c1">#     &gt;&gt;&gt; noneOf(&quot;abcdefg&quot;).exec(&quot;hello&quot;, 0)</span>
<span class="c1">#     [&#39;h&#39;]</span>
<span class="c1">#     &quot;&quot;&quot;  # noqa: E501</span>
<span class="c1">#     def f(target: str, position: int = 0) -&gt; ParseResult:</span>
<span class="c1">#         exists: bool = False</span>
<span class="c1">#         targetChar: str = target[position:position + 1]</span>
<span class="c1">#         for c in s:</span>
<span class="c1">#             if targetChar == c:</span>
<span class="c1">#                 exists = True</span>
<span class="c1">#                 break</span>
<span class="c1">#         if not exists:</span>
<span class="c1">#             return Success([targetChar], position + 1)</span>
<span class="c1">#         return Failure(&quot;parse error at (&quot; + str(position) + &quot;): unexpected &quot; + targetChar + &quot; expecting &quot; + s, position)  # noqa: E501</span>
<span class="c1">#</span>
<span class="c1">#     return Parser(f)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">doctest</span>
    <span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</pre></div>

                </div>
              </div>
            </div>
          </div>
        </div>
        
        
      </div><!-- /row -->

      <!-- row -->
      <div class="row footer-relbar">
<div id="navbar-related" class=" related navbar navbar-default" role="navigation" aria-label="related navigation">
  <div class="navbar-inner">
    <ul class="nav navbar-nav ">
        <li><a href="../../index.html">simpleparser 0.0.1 documentation</a></li>
    </ul>
<ul class="nav navbar-nav pull-right hidden-xs hidden-sm">
      
        <li><a href="../../py-modindex.html" title="Python Module Index" >modules</a></li>
        <li><a href="../../genindex.html" title="General Index" >index</a></li>
        <li><a href="../index.html" >Module code</a></li>
        <li><a href="#">top</a></li> 
      
    </ul>
  </div>
</div>
      </div><!-- /row -->

      <!-- footer -->
      <footer role="contentinfo">
          &copy; Copyright 2020, maetaro.
        Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 3.4.1.
      </footer>
      <!-- /footer -->

    </div>
    <!-- /container -->

  </body>
</html>